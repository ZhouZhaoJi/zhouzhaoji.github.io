<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>QT开发笔记：信号与槽</title>
      <link href="/2019/08/31/QT-Signals-And-Slots/"/>
      <url>/2019/08/31/QT-Signals-And-Slots/</url>
      <content type="html"><![CDATA[<p><strong>QT提供了一种信号与槽的机制实现QObject对象间的消息传递。</strong></p><a id="more"></a><p><strong>如果我们自定义一个类希望它支持信号与槽，我们需要让这个类继承QObject，并且在类体声明的最前面，加入<code>Q_OBJECT</code>。然后我们就可以在这个类中声明该类对象拥有的信号，声明并定义该类对象拥有的槽。</strong></p><p><strong>我们可以用QObject::connect()静态函数链接一个QObject对象的信号和另一个QObject对象的槽。当一个QObject对象emit一个信号的时候，连接到这个信号上的QObject对象的槽将被调用。</strong></p>]]></content>
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>QT开发笔记：国际化</title>
      <link href="/2019/08/28/QT-Internationalization/"/>
      <url>/2019/08/28/QT-Internationalization/</url>
      <content type="html"><![CDATA[<p><strong>QT提供了一个方式，可以将程序中用QObject::tr()函数包裹的英文字符串翻译成其他语言，从而实现程序的国际化。</strong></p><a id="more"></a><h1 id="如何实现中国化"><a href="#如何实现中国化" class="headerlink" title="如何实现中国化"></a>如何实现中国化</h1><p><strong>将你想要翻译成其他语言的英文字符串用QObject::tr()括住。</strong></p><p><strong>在项目的.pro文件加入：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRANSLATIONS += zh.ts</span><br></pre></td></tr></table></figure></p><p><strong>在QT Creator的菜单栏中，选择工具-&gt;外部-&gt;QT预言家-&gt;更新翻译，就会在该项目的文件夹下生成一个<code>zh.ts</code>文件。这个文件是用来给你用linguist这个程序编辑英文字符串到某种语言的映射关系的。所以打开linguist程序，用这个程序中打开<code>zh.ts</code>文件。它会列出类（上下文），以及这个类中用QObject::tr()括住的英文字符串。编辑这些英文字符串跟中文的映射关系。保存。</strong></p><p><strong><code>zh.ts</code>文件是用来编辑的，不能直接使用，你只能使用这个文件通过发布生成的<code>zh.qm</code>文件。在QT Creator的菜单栏中，选择工具-&gt;外部-&gt;QT预言家-&gt;发布翻译，就会在项目文件夹下生成<code>zh.qm</code>文件。将这个文件放到项目的资源文件中。</strong></p><p><strong>现在你就可以在程序中，使用这个文件实现中国化了。New一个QTranslator对象，并调用其load方法加载<code>zh.qm</code>文件，接着调用QCoreApplication::installTranslator这个静态方法，将刚刚New出来的QTranslator对象指针传进去。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QTranslator *translator = <span class="keyword">new</span> QTranslator();</span><br><span class="line"><span class="keyword">if</span>(!translator-&gt;load(<span class="string">"zh.qm的路径"</span>))&#123;</span><br><span class="line">qDebug()&lt;&lt;<span class="string">"Loading translation file fails!"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!QCoreApplication::installTranslator(translator))&#123;</span><br><span class="line">qDebug()&lt;&lt;<span class="string">"Installing translator fails!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>installTranslator这个方法会将这个对象指针放到一个list的最后，你可以安装多个。当遇到一个要显示一个QObject::tr()括住的字符串的时候，会按照安装相反的顺序在这个list中指针指向的对象中搜索这个字符串的映射，如果找到则停止搜索，并将映射的文字显示出来。假如没有找到则不翻译。</strong></p><p><strong>你还可以用下面的函数删除list中的指针：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!QCoreApplication::removeTranslator(translator))&#123;</span><br><span class="line">qDebug()&lt;&lt;<span class="string">"Removing translator fails!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意这个函数仅仅从list中移除了translator指针，并没有析构它，所以你可能还需要delete它。</strong></p>]]></content>
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>集合论</title>
      <link href="/2019/08/28/Set-Theory/"/>
      <url>/2019/08/28/Set-Theory/</url>
      <content type="html"><![CDATA[<ul><li>$\forall A \forall x(x \in A \veebar x \not\in A)$</li><li>$\forall A \forall B(A=B \iff \forall x(x \in A \iff x \in B))$</li><li>$\exists ! A \forall x  (x \not\in A),A=\emptyset$</li><li>$\forall x \exists ! A  (x \in A \wedge  |A| = 1),A=\lbrace x\rbrace $</li><li>$\forall A \forall B \exists ! C \forall x(x \in C \iff x \in A \vee x \in B),C=A \cup B$</li><li>$\forall A \forall B(A \subseteq B \iff \forall x(x \in A \implies x \in B))$</li><li>$\forall A \forall B(A \subset B \iff A \subseteq B \wedge  A \not= B)$</li><li>$\forall A \exists ! B\forall x (x \in B \iff x \in A \wedge P(x)),B=\lbrace x \in A :P(x)\rbrace $</li><li>$\lbrace x \in A : x \in B \rbrace = A \cap B$</li><li>$\lbrace x\in A : x \not\in B \rbrace = A \setminus B$</li><li>$\forall A \exists ! B\forall y(y \in B \iff \exists x \in A(y = f(x))),B= \lbrace f(x) : x \in A \rbrace$</li></ul><a id="more"></a>]]></content>
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
